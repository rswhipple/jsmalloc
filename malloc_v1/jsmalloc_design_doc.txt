Drafted outline by RWS:

Jsmalloc is a two tiered dynamic allocator. 
The structure is divided into a "Backend Pageheap" and a "Frontend Cache".
The Backend Pageheap is organized into spans. 
Each span represents an isolated heap of memory called from the OS using the mmap() system call.
Spans are divided into pages (size determined by the OS).
The Backend Pageheap is accessible via a pagemap structure.
The two tiered system allows us to more dynamically handle freeing of unused memory.

A predefined number of pages are allocated as fast, small or large.
Memory sizes are divided into tiny, small, large and huge "chunks".
The page type reflects its memory size category. (see below)
Pages are moved into the Frontend Cache on an as-needed basis.


Fast Pages:
    For "tiny" allocation sizes from min_chunk_size to 64 bytes in 8 byte increments.
    Only one size per page, no coalesing.
    Free chunks are accessed by a simple linked list, LIFO (last in first out).

Small Pages:
    For "small" allocation sizes, 72 to 512 bytes in varying increments.
    Double linked list, freed chunks are added into an unsorted heap first.
    The unsorted heap sorts chunks (handling coalesing) and then adds free chunks to the hash table.

Large Pages:
    For "large" allocatation sizes > 512 bytes and < 4kB.
    Double linked list, freed chunks are added into an unsorted heap first.
    The unsorted heap sorts chunks (handling coalesing) and then adds free chunks to the hash table.


Huge size â€“ anything over 4kB, will be allocated directly from the OS using mmap() and returned upon freeing.